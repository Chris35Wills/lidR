% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/setGeneric.r, R/ClassLidar.r
\docType{methods}
\name{voxelize}
\alias{voxelize}
\alias{voxelize,Lidar-method}
\title{Voxelize the space and compute metrics for each voxel}
\usage{
voxelize(obj, res, func)

\S4method{voxelize}{Lidar}(obj, res, func)
}
\arguments{
\item{obj}{An object of class \code{Lidar}}

\item{res}{numeric. The size of the cells}

\item{func}{the function to be apply to each cells}
}
\value{
It returns a \code{data.table} with containing the metrics for each voxel. The table have the class "voxels" enabling to easily plot it.
}
\description{
Voxelize the cloud of points and compute a series of descriptive statistics for
each voxel.
}
\details{
Voxelize create a 3D matrix of voxels whith a given resolution. It create a voxel
from the cloud of point if there is at least one points in the voxel. For each voxel
the function allows to compute one or several derived metrics by the same way than
the gridMetrics functions.
Basically there no predifined metrics. The users must write is own function to create metrics.
Vovelize will dispach the LiDAR data for each voxel in the user's function. The user write his
function without thinking about grid cells. Just thinking about a cloud of points (see example).
}
\examples{
LASfile <- system.file("extdata", "Megaplot.las", package="lidR")
lidar = LoadLidar(LASfile)

# Cloud of point is voxelize with a 1 meter resolution and in each voxel
# the number of points is computed.
voxelize(lidar, 1, length(Z))

# Cloud of point is voxelize with a 1 meter resolution and in each voxel
# the mean scan angle of points is computed.
voxelize(lidar, 1, mean(ScanAngle))

# Define your own metric function
myMetrics = function(i, angle, pulseID)
{
  ret = list(
        npulse  = length(unique(pulseID)),
        angle   = mean(angle),
        imean   = mean(i)
        )

   return(ret)
 }

voxels = voxelize(lidar, 20, myMetrics(Intensity, ScanAngle, pulseID))

plot(voxels, "hmean")
plot(voxels, "hmax")
plot(voxels, "imean")
#etc.
}

