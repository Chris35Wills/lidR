% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ClassLidar.r
\docType{methods}
\name{canopyModel,Lidar-method}
\alias{canopyModel}
\alias{canopyModel,Lidar-method}
\title{Canopy surface model}
\usage{
\S4method{canopyModel}{Lidar}(obj, resolution = 2, method = "local_maximum")
}
\arguments{
\item{obj}{An object of class \code{Lidar}}

\item{resolution}{numeric. The size of a grid cell in LiDAR data coordinates units}

\item{method}{character. The algorithm used to compute the canopy i.e. \code{"local_maxium"} or \code{"TIN"}}
}
\value{
It returns a \code{data.table} with the class \code{gridMetrics} which anable to plot it easily.
}
\description{
Creates a canopy surface model using a LIDAR point cloud.
}
\details{
By default, the algorithm used is the local maximum algorithm. It assigns the
elevation of the highest return within each grid cell to the grid cell center.
It can also use a triangular irregular network (TIN) algorithm. In this case
it use a Delaunay triangulation on first returns. The TIN rasterization is
currently very slow. So, it can't be used for large datasets.
}
\examples{
LASfile <- system.file("extdata", "Megaplot.las", package="lidR")
lidar = Lidar(LASfile)

# Local maximum algorithm with a resolution of 2 meters
lidar \%>\% canopyModel(2) \%>\% plot
lidar \%>\% canopyModel(2) \%>\% plot3d

# Local maximum and TIN algorithm on a plot with a resolution of 0.5 meters
forestplot = clipCircle(lidar, 685000, 5017900, 25)
forestplot \%>\% canopyModel(.5) \%>\% plot
forestplot \%>\% canopyModel(.5, "TIN") \%>\% plot
}
\seealso{
\code{\link[lidR:gridMetrics]{gridMetrics}}
\code{\link[geometry:delaunayn]{delaunayn}}
\code{\link[lidR:rasterizeTIN]{rasterizeTIN}}
\code{\link[lidR:clipCircle]{clipCircle}}
}

