% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/processParallel.r
\docType{methods}
\name{processParallel}
\alias{processParallel}
\alias{processParallel,Catalog-method}
\title{Apply a function to a set of tiles}
\usage{
processParallel(x, func, mc.cores = "auto", combine = "rbind", ...)

\S4method{processParallel}{Catalog}(x, func, mc.cores = "auto",
  combine = "rbind", ...)
}
\arguments{
\item{x}{A Catalog object}

\item{func}{A function which has one parameter: the name of a .las file}

\item{mc.cores}{numeric. Number of cores used. Default is "auto"}

\item{combine}{character. The function used to merge the outputs of the \code{func} function}

\item{\dots}{Other parameters for \code{mclapply}}
}
\description{
Apply a function to a set of tiles using several cores (Linux only, Windows users can only use one core, sorry...)
}
\details{
When users have a set of LAS data organized in several tiles it can apply a user function to each tile.
Examples section describes the procedure to apply to each file beginning with data loading (see example).
WARNING: there is no buffer mechanism to protect the process again edge artifacs. See section "Edge artifacts".
}
\section{Egde artifacts}{


It is very important to take precautions to avoid “edge artifacts” when processing LiDAR tiles.
If the points from neighboring tiles are not included during certain process it might involve edge artifacts
at the edges of the tiles. For exemple, empty or incomplete pixels in a rasterization process. The lidR package
does not provide internal tools to deal with buffer as it is design for experimental purposes not to output professional
products. The users could, for example, filter the invalid/corrupted data at the edge of the tiles from the output.
}
\examples{
\dontrun{
# 1. build a project
project = Catalog("folder")
plot(project)

# 2. load the shapefile you need to filter your points (if needed).
lake = rgdal::readOGR("folder", "shapefile")

# 3 build the function which analyses a tile (a file).
# This function input is only the path of a .las file
# see the following template

analyse_tile = function(LASFile)
{
  # Load the data
  lidar = readLAS(LASFile)

  # Associate geographic data with lidar points (if needed)
  lidar \%<>\% classifyFromShapefile(lake, field="inlake")

  # filter lake
  lidar \%<>\% extract(lake == FALSE)
  # compute all metrics
  metrics = gridMetrics(lidar, 20, myMetrics(X,Y,Z,Intensity,ScanAngle,pulseID))

  return(metrics)
}

# 5. Process the project. By default it detects how many cores you have. But you can add
# an optional parameter mc.core = 3. see ?mclapply for other options
output = project \%>\% processParallel(analyse_tile)
}
}
\seealso{
\link[lidR:Catalog-class]{catalog}
\link[parallel:mclapply]{mclapply}
\link[lidR:classifyFromShapefile]{classifyFromShapefile}
\link[lidR:gridMetrics]{gridMetrics}
}

