% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/catalog_flightlines.r
\name{catalog_flightlines}
\alias{catalog_flightlines}
\title{Find the flighlines hulls}
\usage{
catalog_flightlines(ctg, concavity = 2, length_threshold = 50,
  density = 0.2)
}
\arguments{
\item{ctg}{A \link[lidR:catalog]{LAScatalog} object.}

\item{concavity}{numeric. If \code{type = "concave"}, a relative measure of concavity. 1 results
in a relatively detailed shape, Infinity results in a convex hull.}

\item{length_threshold}{numeric. If \code{type = "concave"}, when a segment length is under this
threshold, it stops being considered for further detalization. Higher values result in simpler shapes.}

\item{density}{numeric. To compute the concave hull of each flighline in a reasonnable timeframe and using
a little amount of memory, only a random fraction of the point is loaded. This number represents the
number of points point per square unit actually loaded. Default is 0.2 i.e. approximately 0.2 pt per
square meter. This is enought to get a fairly accurate hulls (~ 1 point each 2 meters).}
}
\value{
A \code{SpatialPolygonDataFrame}.
}
\description{
Find the flightline hulls from a catalog. The function works only if the field 'PointSourceID'
is properly populated. The function first loads a random fraction of the catalog then compute a concave
hull for each flightline. Flighlines are expected to be recorded in 'PointSourceID'. If not, the function
will run anyway but will find a single flighline being the whole dataset itself.
}
\details{
The flightlines should be contiguous. You could get weird results when the flightline IDs are spread
in several non contiguous parts of the point cloud. In other words "islands" of points are not
supported yet.\cr\cr
The concave hull method under the hood is described in Park & Oh (2012). The function relies on
the \link[concaveman:concaveman]{concaveman} function which itself is a wrapper around the
\href{https://github.com/mapbox/concaveman}{Vladimir Agafonking's implementation}.\cr\cr
}
\examples{
\dontrun{
# Using files for which the PointSourceID is properly populated
ctg = catalog("folder/")
by_file(ctg) = TRUE
buffer(ctg) = 5

flightlines =  catalog_flightlines(ctg)

col = adjustcolor(col = pastel.colors(length(flightlines)), alpha.f = 0.6)
sp::plot(flightlines, col = col)
}
}
