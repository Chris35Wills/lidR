% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/catalog_flightlines.r
\name{catalog_flightlines}
\alias{catalog_flightlines}
\title{Find the flighlines hulls}
\usage{
catalog_flightlines(ctg, concavity = 2, length_threshold = 50,
  density = 0.1)
}
\arguments{
\item{ctg}{A \link[lidR:catalog]{LAScatalog} object.}

\item{concavity}{numeric. If \code{type = "concave"}, a relative measure of concavity. 1 results
in a relatively detailed shape, Infinity results in a convex hull.}

\item{length_threshold}{numeric. If \code{type = "concave"}, when a segment length is under this
threshold, it stops being considered for further detalization. Higher values result in simpler shapes.}

\item{density}{numeric. To compute the concave hull of each flighline in a reasonnable timeframe and using
a little amount of memory, only a random fraction is loaded. This random fraction represent this number
a point per square unit. Default is 0.1 i.e. approximately 0.1 pt per square meter. This is enought
to get a fairly accurate hulls.}
}
\value{
A \code{SpatialPolygonDataFrame}.
}
\description{
Find the flightline hulls from a catalog. The function works only if the field 'PointSourceID'
is properly populated. The function first load a random fraction of the catalog then compute a concave
hull for each flighline. Flighline are expected to be recorded in 'PointSourceID'. If not the function
will run anyway but will find a single flighline being the whole dataset itself.
}
\details{
The concave hull method under the hood is described in Park & Oh (2012). The function relies on
the \link[concaveman:concaveman]{concaveman} function which itself is a wrapper around the
\href{https://github.com/mapbox/concaveman}{Vladimir Agafonking's implementation}.
}
\examples{
\dontrun{
# Using file for which the PointSourceID is properly populated
ctg = catalog("folder/")

flightlines =  catalog_flightlines(ctg)

col = adjustcolor(col = rainbow(length(flightlines)), alpha.f = 0.6)
sp::plot(flightlines, col = col)
}
}
