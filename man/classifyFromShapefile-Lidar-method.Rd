% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ClassLidar.r
\docType{methods}
\name{classifyFromShapefile,Lidar-method}
\alias{classifyFromShapefile}
\alias{classifyFromShapefile,Lidar-method}
\title{Classify LiDAR points from the polygons in a shapefile}
\usage{
\S4method{classifyFromShapefile}{Lidar}(obj, shapefile, field)
}
\arguments{
\item{obj}{An object of the class \code{Lidar}}

\item{shapefile}{An object of class SpatialPolygonsDataFrame}

\item{field}{characters. The name of a field of the shapefile or the name of the new field in the Lidar object.}
}
\value{
An object of the class \code{Lidar} with a new field
}
\description{
Classify LiDAR points from the polygons in a ESRI shapefile
}
\details{
Classify Lidar points based on geographic data found in a shapefile. It check
if the LiDAR points are in polygons given in the shapefile. If the parameter
\code{field} is the name of a field of the shapefile if classify the points
based on the data in the shapefile. Else it classify points as boolean. TRUE
if the points is in a polygon, FALSE otherwise. This function allows to filter
lakes for example.
}
\examples{
LASfile <- system.file("extdata", "Megaplot.las", package="lidR")
shapefile_dir <- system.file("extdata", package = "lidR")

lidar = Lidar(LASfile)
lakes = rgdal::readOGR(shapefile_dir, "lac_ontario_UTM17")

# The field "lake" does not exist in the shapefile. Points are classified as TRUE if in a polygon
lidar = classifyFromShapefile(lidar, lakes, "inlakes")
forest = leach(lidar, inlakes == FALSE)
plot(lidar)
plot(forest)

# The field "LAKENAME_1" exist in the shapefile. Points are classified with the value of the polygon
lidar = classifyFromShapefile(lidar, lakes, "LAKENAME_1")
}
\seealso{
\code{\link[rgdal:readOGR]{readOGR} }
\code{\link[sp:SpatialPolygonsDataFrame-class]{SpatialPolygonsDataFrame} }
}

